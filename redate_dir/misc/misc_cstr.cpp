#include "dbg.h"
#include "misc_cstr.h"



#ifdef __cplusplus
/// 雑多なルーチンのための名前空間。
//namespace MISC {
#endif


/** 文字列末にある空白を削除する
 *  @param	str 文字列.書き換えられる
 *  @param	flags bit0=1:最後の'￥ｎ''￥ｒ'は残す
 */
char *strTrimSpcR(char str[], int flags)
{
	unsigned char *s;
	unsigned char *p;
	size_t n;
	int  cr;
	int  c;

	if (str == NULL)
		return NULL;
	s = (unsigned char *)str;
	n = strlen(str);
	if (n == 0)
		return str;
	p = s + n;

	// 改行文字の状態を設定
	cr = 0;
	if (flags & 1) {	// 改行を考慮する？
		c = *--p;
		if (c == '\n') {
			if (p-1 >= s && p[-1] == '\r') {
				--p;
				cr = 3;
			} else {
				cr = 1;
			}
			--p;
		} else if (c == '\r') {
			cr = 2;
			--p;
		}
		p++;
		if (p <= s) {
			return str;
		}
	}

	// 行末の空白部分を飛ばしてそうでない部分が現れるまで探す
	n = 0;
	do {
		c = *--p;
		n++;
	} while ((p > s) & (c != 0) & ((c <= 0x20) | (c == 0x7f)));

	if ((c > 0x20) & (c != 0x7f)) {
		--n;
		p++;
	}

	// 必要なら改行コードを復元する
	if (cr) {
		if (cr & 2) {
			*p++ = '\r';
		}
		if (cr & 1) {
			*p++ = '\n';
		}
	}
	*p = '\0';
	return str;
}



#if 0
/// 1バイト文字をsjisに変換するためのテーブル
const unsigned short asc2sjis_table[] = {
	 0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f,
	 0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f,
	 0x8140, 0x8149, 0x8168, 0x8194, 0x8190, 0x8193, 0x8195, 0x8166, 0x8169, 0x816a, 0x8196, 0x817b, 0x8143, 0x817c, 0x8144, 0x815e,
	 0x824f, 0x8250, 0x8251, 0x8252, 0x8253, 0x8254, 0x8255, 0x8256, 0x8257, 0x8258, 0x8146, 0x8147, 0x8183, 0x8181, 0x8184, 0x8148,
	 0x8197, 0x8260, 0x8261, 0x8262, 0x8263, 0x8264, 0x8265, 0x8266, 0x8267, 0x8268, 0x8269, 0x826a, 0x826b, 0x826c, 0x826d, 0x826e,
	 0x826f, 0x8270, 0x8271, 0x8272, 0x8273, 0x8274, 0x8275, 0x8276, 0x8277, 0x8278, 0x8279, 0x816d, 0x818f, 0x816e, 0x814f, 0x8151,
	 0x8165, 0x8281, 0x8282, 0x8283, 0x8284, 0x8285, 0x8286, 0x8287, 0x8288, 0x8289, 0x828a, 0x828b, 0x828c, 0x828d, 0x828e, 0x828f,
	 0x8290, 0x8291, 0x8292, 0x8293, 0x8294, 0x8295, 0x8296, 0x8297, 0x8298, 0x8299, 0x829a, 0x816f, 0x8162, 0x8170, 0x8150, 0x007f,
	 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,
	 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,
  #if 1 	/* カタカナにする */
	 0x8150, 0x8142, 0x8175, 0x8176, 0x8141, 0x8145, 0x8392, 0x8340, 0x8342, 0x8344, 0x8346, 0x8348, 0x8383, 0x8385, 0x8387, 0x8362,
	 0x815b, 0x8341, 0x8343, 0x8345, 0x8347, 0x8349, 0x834a, 0x834c, 0x834e, 0x8350, 0x8352, 0x8354, 0x8356, 0x8358, 0x835a, 0x835c,
	 0x835e, 0x8360, 0x8363, 0x8365, 0x8367, 0x8369, 0x836a, 0x836b, 0x836c, 0x836d, 0x836e, 0x8371, 0x8374, 0x8377, 0x837a, 0x837d,
	 0x837e, 0x8380, 0x8381, 0x8382, 0x8384, 0x8386, 0x8388, 0x8389, 0x838a, 0x838b, 0x838c, 0x838d, 0x838f, 0x8393, 0x814a, 0x814b,
  #elif 1	/* ひらがなにする */
	0x8150, 0x8142, 0x8175, 0x8176, 0x8141, 0x8145, 0x82f0, 0x829f, 0x82a1, 0x82a3, 0x82a5, 0x82a7, 0x82e1, 0x82e3, 0x82e5, 0x82c1,
	0x815b, 0x82a0, 0x82a2, 0x82a4, 0x82a6, 0x82a8, 0x82a9, 0x82ab, 0x82ad, 0x82af, 0x82b1, 0x82b3, 0x82b5, 0x82b7, 0x82b9, 0x82bb,
	0x82bd, 0x82bf, 0x82c2, 0x82c4, 0x82c6, 0x82c8, 0x82c9, 0x82ca, 0x82cb, 0x82cc, 0x82cd, 0x82d0, 0x82d3, 0x82d6, 0x82d9, 0x82dc,
	0x82dd, 0x82de, 0x82df, 0x82e0, 0x82e2, 0x82e4, 0x82e6, 0x82e7, 0x82e8, 0x82e9, 0x82ea, 0x82eb, 0x82ed, 0x82f1, 0x814a, 0x814b,
  #else 	/* もとの半角文字のまま */
	 0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7, 0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,
	 0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7, 0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,
	 0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00c4, 0x00c5, 0x00c6, 0x00c7, 0x00c8, 0x00c9, 0x00ca, 0x00cb, 0x00cc, 0x00cd, 0x00ce, 0x00cf,
	 0x00d0, 0x00d1, 0x00d2, 0x00d3, 0x00d4, 0x00d5, 0x00d6, 0x00d7, 0x00d8, 0x00d9, 0x00da, 0x00db, 0x00dc, 0x00dd, 0x00de, 0x00df,
  #endif
	 0x00e0, 0x00e1, 0x00e2, 0x00e3, 0x00e4, 0x00e5, 0x00e6, 0x00e7, 0x00e8, 0x00e9, 0x00ea, 0x00eb, 0x00ec, 0x00ed, 0x00ee, 0x00ef,
	 0x00f0, 0x00f1, 0x00f2, 0x00f3, 0x00f4, 0x00f5, 0x00f6, 0x00f7, 0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe, 0x00ff,
};


/** 半角を全角に変換。変換しなかった文字はそのまま返す。
 */
/// 1バイト文字をsjisに変換する
static inline unsigned asc2sjis(unsigned jc) {
	// asc2sjis() 内だけで使うテーブル。他は使っちゃ駄目
	int f = jc <= 0xff;
	return (asc2sjis_table[(unsigned char)jc] & (-f)) | (jc & (f - 1));
	// return f ? asc2sjis_table[(unsigned char)jc] : jc;
}

#endif



// ----------------------------------------------------------------------------
// ファイル名処理関係
// ----------------------------------------------------------------------------


#ifdef __cplusplus
/** 拡張子を付け替える */
std::string& fname_chgExt(std::string &fname, const char *ext)
{
	char	   *p;

	p = fname_getBase(fname.c_str());
	p = strrchr(p, '.');
	if (p == NULL) {
		if (ext) {
			fname += ".";
			fname += ext;
		}
	} else {
		ptrdiff_t n = p - fname.c_str();
		if (ext == NULL)
			fname.replace(n, std::string::npos, "");
		else
			fname.replace(n+1, std::string::npos, ext);
	}
	return fname;
}
#endif






/** path から ./ と ../ のサブディレクトリをルールに従って削除 (MS-DOS依存)
 */
char *fname_delDotDotDir(char path[])
{
	uint8_t *p = (uint8_t*)path;
	uint8_t *d;
	uint8_t *dir = NULL;
	int c;

	if (*p && p[1] == ':') {		// とりあえず、手抜きで１文字だけ。ネットワークとかは考えない
		p += 2;
	}
	if (memcmp(p, "//", 2) == 0 || memcmp(p, "\\\\", 2) == 0) {		// ネットワークコンピュータ？
		p += 2;
		dir = p;
	}
	d = p;
	while (*p) {
		c = *p++;
		if ((c == '/') | (c == '\\')) {
			c = '\\';
			*d++ = c;
			if (p[0] == '.') {
				if ((p[1] == '/') | (p[1] == '\\')) {
					p += 2;
				} else if ((dir!=0) & (p[1] == '.') & ((p[2] == '/') | (p[2] == '\\'))) {
					p += 3;
					d = dir;
				}
			}
			dir = d;
	  #ifdef USE_FNAME_SJIS
		} else if (ISKANJI(c) & (*p != 0)) {
			*d++ = c;
			*d++ = *p++;
	  #endif
		} else {
			*d++ = c;
		}
	}
	*d = 0;
	return path;
}



/** 文字列の最後に \ か / があれば削除
 */
char *fname_delLastDirSep(char dir[])
{
	char *p, *s;

	if (dir) {
		s = fname_getBase(dir);
		if (strlen(s) > 1) {
			p = s + strlen(s);
			if (p[-1] == '/') {
				p[-1] = 0;
			} else if (p[-1] == '\\') {
				//if (FIL_sjisFlag == 0) {
					//p[-1] = 0;
				//} else
				{
					int f = 0;
					while (*s) {
						f = 0;
					  #ifdef USE_FNAME_SJIS
						if (ISKANJI(*s) && s[1]) {
							s++;
							f = 1;
						}
					  #endif
						s++;
					}
					if (f == 0)
						p[-1] = 0;
				}
			}
		}
	}
	return dir;
}


#ifdef __cplusplus
//}	// namespace MISC
#endif


