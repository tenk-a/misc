cmake_minimum_required(VERSION 3.24)

project(acpp LANGUAGES C)

# set(CMAKE_CXX_STANDARD 11)
# set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SRC_DIR          "${CMAKE_SOURCE_DIR}/src")
set(THIRDPARTY_DIR   "${CMAKE_SOURCE_DIR}/thirdparty")

set(CMN_INC_DIRS     "${CMAKE_CURRENT_SOURCE_DIR}")
set(CMN_LIB_DIRS     "")
set(CMN_LIBS         "")
set(CMN_DEFS         "")
set(CMN_COMPILE_OPTS "")
set(CMN_RES          "")


# #####################################
# Platform-specific settings

if(MSVC AND WIN32)
  list(APPEND CMN_DEFS  _ANSI)
  list(APPEND CMN_LIBS  "kernel32.lib" "user32.lib" "shell32.lib" "advapi32.lib")
  list(APPEND CMN_COMPILE_OPTS  "-Zc:wchar_t" "-Zc:forScope")
  if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.0.24215.1")
    list(APPEND CMN_COMPILE_OPTS  "-utf-8")
  endif()
  if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.0.24215.1")
    list(APPEND CMN_COMPILE_OPTS  "-Zc:rvalueCast")
  endif()
  if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL "19.14.26428.1")
    list(APPEND CMN_COMPILE_OPTS  "-Zc:__cplusplus")
  endif()
  if(CMAKE_C_COMPILER_VERSION VERSION_LESS "19.0")
    set(NEED_CCWARP 1)
    list(APPEND CMN_INC_DIRS "${THIRDPARTY_DIR}/ccwrap/vc/" "${THIRDPARTY_DIR}/ccwrap/ccwrap/")
    list(APPEND CMN_COMPILE_OPTS  "-FIccwrap_header.h")
    list(APPEND CMN_DEFS _UNICODE)
  endif()
  list(APPEND CMN_RES  "${SRC_DIR}/win/ActiveCodePageUTF8.manifest")
  set(CMAKE_MSVC_RUNTIME_LIBRARY  "MultiThreaded$<$<CONFIG:Debug>:Debug>")
  set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
elseif(APPLE)
  if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
    list(PREPEND CMN_INC_DIRS  "/opt/homebrew/include")
    list(PREPEND CMN_LIB_DIRS  "/opt/homebrew/lib")
  else()
    list(PREPEND CMN_INC_DIRS  "/usr/local/include")
    list(PREPEND CMN_LIB_DIRS  "/usr/local/lib")
  endif()
elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "Clang")
  if(WIN32)
    list(APPEND CMN_DEFS  _ANSI  FOR_WIN10_1903_OR_LATER)
    list(APPEND CMN_RES   "${SRC_DIR}/win/ActiveCodePageUTF8.rc")
  endif()
  if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    list(APPEND CMN_COMPILE_OPTS  "-finput-charset=utf-8" "-fexec-charset=utf-8" "-fwide-exec-charset=utf-32LE")
  endif()
elseif(CMAKE_C_COMPILER_ID MATCHES "Watcom")
  set(NEED_CCWARP 1)
  set(CMAKE_WATCOM_RUNTIME_LIBRARY "MultiThreaded")
  list(APPEND CMN_INC_DIRS "${THIRDPARTY_DIR}/ccwrap/watcom/" "${THIRDPARTY_DIR}/ccwrap/ccwrap/")
  list(APPEND CMN_COMPILE_OPTS  "-fi=ccwrap_header.h")
  list(APPEND CMN_DEFS  CCWRAP_NO_EXCEPTIONS)
elseif(CMAKE_C_COMPILER_ID STREQUAL "Borland")
  set(NEED_CCWARP 1)
  list(APPEND CMN_INC_DIRS "${THIRDPARTY_DIR}/ccwrap/etc/borland/")
elseif(DEFINED ENV{CC} AND "$ENV{CC}" MATCHES "dmc-cc")
  set(NEED_CCWARP 1)
  list(APPEND CMN_INC_DIRS "${THIRDPARTY_DIR}/ccwrap/etc/dmc/")
  list(APPEND CMN_DEFS     _WIN32_WINNT=0x0500)
else()
endif()

if(DEFINED NEED_CCWARP AND NOT EXISTS "${THIRDPARTY_DIR}/ccwrap")
  message(FATAL_ERROR "This is an old compiler, so run thirdparty/install_ccwap.bat")
endif()


# #####################################
# Target

add_executable(${PROJECT_NAME})

target_sources(${PROJECT_NAME} PRIVATE
  ${SRC_DIR}/acpp.c
  ${SRC_DIR}/filn.c
  ${SRC_DIR}/filn.h
  # ${SRC_DIR}/ujfile.c
  # ${SRC_DIR}/ujfile.h
  ${SRC_DIR}/mbc.c
  ${SRC_DIR}/mbc.h
  ${CMN_RES}
)

target_compile_definitions(${PROJECT_NAME} PRIVATE
  ${CMN_DEFS}
)

target_compile_options(${PROJECT_NAME} PRIVATE
  ${CMN_COMPILE_OPTS}
)

target_include_directories(${PROJECT_NAME} PRIVATE
  ${CMN_INC_DIRS}
)

target_link_directories(${PROJECT_NAME} PRIVATE
  ${CMN_LIB_DIRS}
)

target_link_libraries(${PROJECT_NAME} PRIVATE
  ${CMN_LIBS}
)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/bin" CACHE PATH "Install path prefix, prepended onto install directories." FORCE)
endif()
install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ".")
