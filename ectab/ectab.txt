ectab   ver. 3.00


■ 概要

・UTF8,SJIS,EUCJP 変換、空白タブ変換、行末の空白タブ削除、改行コード
  変換、行番号の付加等を行うコマンドライン・ツール。

・簡易で１行範囲の c/c++ソースを 考慮して 'または "で囲まれた範囲
  での変換を抑制したり、\エスケープ化等が可能。
  (//コメント,/*コメント*/中は、'"は唯の文字として扱う）。
  (c++11以降の生文字列は未対応)

・LF($0a uni*),CR($0d old mac),CRLF($0d0a win) を改行として扱い、
  ファイル出力では、改行コードを CR,LF,CRLF の何れかに変更可能。
  とくに指定のないときは、元のまま出力。
  ※標準出力はOSに依存(winでLFはCRLFに)


■ 使いかた

  usage: ectab [-opts] [ファイル名]...

    オプションやファイル名は複数指定でき、ファイル名の直前までの
  オプションが反映される。
    ファイルの指定の無いとき、標準入力し、出力ファイルの指定が
  なければ標準出力する。

    ファイル名はwinの通常の * ? が使用可能だが、さらに特殊な
  ものとして ** でディレクトリ再帰指定になる。

  出力先にすでにファイルがあった場合、元ファイルを.bak にして
  から出力。
  ※ 正確には、変換途中でのエラー対策で
    ・一旦 出力ファイル名.~tmp 拡張子をつけて出力
    ・出力ファイル名.bak があれば削除.
    ・出力ファイル名の元ファイルを .bak に変更.
    ・出力ファイル名.~tmp を 出力ファイル名 に変更.
  となる。.~tmp が残っていれば変換失敗.


■ オプション

  -?        説明
  -d[DIR]   出力先ディレクトリ DIR に読込ファイル名で出力。
  -o        元ファイルを .bak にして元ファイル名で出力。
  -o[FILE]  FILEに出力.
  -m[-]     行末の空白・タブ・コントロールコードを削除.
  -r[0-3]   改行を 0:入力のまま 1:'\n' 2:'\r' 3:'\r\n' に変換
            ただしファイル出力時のみで、標準入出力では '\n'は
            OSに依存(winでは'\r\n')
  -s[N]     出力のタブサイズを N にする(空白->タブ)
  -t[N]     入力のタブサイズを N にする(タブ->空白)
  -z        出力のタブサイズが空白1文字にしかならない場合は空白で出力
  -j        出力のタブサイズ丁度の空白のみタブに変換
  -q        出力を4タブ8タブで見た目が違わないようにする
  -b[0-2]   C/C++ の "" '' 対を考慮(r""やユーザー定義系は未考慮)
            0:しない 1:する 2:対中のコントロール文字を\文字化
  -u        半角小文字の大文字化
  -l        半角大文字の小文字化
  -a        EOFとして0x1aを出力
  -k[ENC]   入力文字エンコード指定.
            SJIS : Shift-JIS(CP932)
            UTF8 : UTF8
            EUCJP : EUC-JP(MS)
            AUTO : 上記を自動判定(誤検知はありえます)
            デフォルトは AUTO.
  -p[ENC]   出力文字エンコード指定. デフォルトは 入力に同じ.
            SJIS,EUCJP,UTF8,UTF8N,UTF8BOM
            ※ UTF8NでBOM無、UTF8BOMでBOM付き。UTF8のみの場合は入力に依存。
  -n[N:M:L:STR]
	  行番号を付けて出力。N,L,STR はそれぞれ
	    N:行番号の桁数
	    M:次の行番号との差
	    L:０行目の行番号
	    STR:行番号とテキストの間に挟む文字列
	  指定のない場合は -n7:1:0:" "。
	  （桁を揃えたくない場合は N=0と指定）
	  L は実際には存在しない０行目の行番号。
	  １行目の行番号は L+M になる。
	  STR の指定は " で囲まれた文字列か空白が現れるまでを用いる。
	  例えば、-n0,10,0," '" で BASIC のコメント文テキスト化


■  文字エンコード

  入力と出力で文字エンコードが違う場合、非可逆な文字コードもあるので
  注意のこと。

  MS Windows の CP932<=>UNICODE 変換を元に、自前でテーブルを持って
  変換している。

  基本 Winと同じだが、0x80 以上の UNICODE->SJIS時 で 0x80 未満に
  なるような変換は別文字にするか未定義文字扱いにしている。
  ex) ¥ -> ￥

  UNICODE では、変換できない文字を表す U+FFFD があるので、
  UNICODE へ変換できない文字コードは U+FFFD にしている。
  SJIS,EUCJP へ変換できない文字は、このツールの決め打ちで
  JIS 7e7e (SJIS:0xeffc、EUCJP:0xFeFe) に変換している。

  自動判定は１ファイル全てを読み込み行う。
  まず Unicode BOM 付きならそれに従う。
  入力ファイルが BOM 付きの UTF16,UTF32 の場合は UTF8 に
  変換する。
  BOM 付きでないなら、
    UTF-8、SJIS、EUCJP、UTF16LE(0x7f以下を含む場合のみ)
  の順にエラーの起きない(可能性の高い)ものをえらび、
  どれにも該当しない場合は エラーにしている。

  文字化けのあるファイルだと誤判定を起こすので、
  その場合は -k で入力を固定すること。

  ただ -k 指定の場合、UTF16,UTF32 入力には未対応。

  BOM 出力は、-pUTF8 は入力状態に従い、
  -pUTF8N はBOM無、-pUTF8BOM は BOM 付となる。


■  ビルド.
  cmake で。
  utf8 対応の c コンパイラを使用のこと。
  vc の場合 -utf8 オプションのある vc14.1 以降。
  それ以前の場合ヘルプメッセージが文字化けする。
  （それ以外は動作のはず）
  vc14.0 未満でビルドをする場合は、言語仕様の辻褄合わせに
    thirdparty/install_ccwrap.bat
  を実行して ccwrap を取得のこと。


■  その他

ライセンスは Boost software license Version 1.0

自分の手に馴染んでる自分用ツール。
名前は好きだったSF作家E.C.タブにちなんで。
(linuxでタブ変換だと expand とかを使えばよく)

                                    Masashi KITAMURA (tenka@6809.net)
                     https://github.com/tenk-a/misc/tree/master/ectab
