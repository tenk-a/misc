/**
 *  @file   ExArgv.h
 *  @brief  argc,argvの拡張処理(ワイルドカード,レスポンスファイル).
 *  @author Masashi KITAMURA
 *  @date   2006-2024
 *  @license Boost Software Lisence Version 1.0
 *  @note
 *  -   主にWin/Dos系(のコマンドラインツール)での利用を想定.
 *      mac,linux gcc/clang でも利用可.
 *
 *  -   main(int argc,char* argv[]) のargc,argvに対し,
 *      ワイルドカード指定やレスポンスファイル指定等を展開したargc,argvに変換.
 *      main()の初っ端ぐらいで,
 *          ExArgv_conv(&argc, &argv);
 *      のように呼び出す.
 *      WC変換を後で行いたい場合は
 *          ExArgv_convEx(&argc, &argv, 0); // ResFile等WC展開以外を先に行う.
 *          (なにか処理)
 *          ExArgv_convEx(&argc, &argv, 2|1); // WC展開を行う.古いargvはfreeする.
 *      結果の argv の各文字列は、必ず malloc されたものになる.
 *      明示的に argv を開放する場合は ExArgv_release(&argv) する.
 *
 *  -   WinMain() で使う場合は EXARGV_FOR_WINMAIN を定義し、
 *          ExArgv_cmdLineToArgv(cmdl, &argc, &argv);
 *          ExArgv_conv(&argc, &argv);
 *      のように呼び出す. あるいは
 *          ExArgv_forWinMain(cmdl, &argc, &argv);
 *      も可.
 *
 *  -   ExArgv.h は、ヘッダだが、ExArgv.c の設定ファイルでもある.
 *      アプリごとに ExArgv.h ExArgv.c をコピーして、ExArgv.h
 *      をカスタムして使うのを想定.
 *      - あるいは ExArgv_conf.h を用意, (EXARGV_UE_CONF_Hを定義して)
 *        そちらに設定する.
 *
 *  -   設定できる要素は,
 *      - ワイルドカード (on/off)
 *      - ワイルドカード時の再帰指定(**)の有無 (on/off)
 *      - @レスポンスファイル (on/off)
 *      - .exe連動 .cfg ファイル 読込 (on/off)
 *      - オプション環境変数名の利用.
 *      等.
 *
 *  -   引数文字列の先頭が'-'ならばオプションだろうで、その文字列中に
 *      ワイルドカード文字があっても展開しない.
 *  -   _WIN32 が定義されていれば win用、でなければ unix系を想定.
 *  -   マクロ UNICODE か EXARGV_ENCODE_WCHAR を定義で wchar_t用、なければchar用.
 *  -   UTF8 が普及したので、defined(EXARGV_ENCODE_MBC) 定義時のみMBCの2バイト目'\'対処.
 *  -   EXARGV_ENCODE_UTF8 を定義すれば、Win10 1903以前の環境で UTF8名を
 *      扱うための変換関数を用意.
 *      ex) int wmain(int argc, wchar_t* wargv[]) {
 *              char** argv = ExArgv_convExToUtf8(&argc, wargv, 1);
 */

// ---------------------------------------------------------------------------
// 設定.

//[] 定義すると、WinMain 用に ExArgv_forWinMain を生成.
//#define EXARGV_FOR_WINMAIN

//[] パス文字列の文字コードとして以下のいづれかを定義.
//   省略時は UNICODE 定義済なら WCHAR, でなければ UTF8.
//   Win以外では UTF8 前提. MBC指定はSJIS等考慮. WCHAR は指定不可, 
//#define EXARGV_ENCODE_ANSI    // Win では A系API を使用. Win以外ではUTF8前提.
//#define EXARGV_ENCODE_MBC     // Win では A系API を使用. DBC 2byte目を考慮.
//#define EXARGV_ENCODE_UTF8 	// Win では W系API を使い UTF8 化. Win以外ではANSIに同じ.
//#define EXARGV_ENCODE_WCHAR   // Win API W系 を使用. Win以外は不可.

//[] ワイルドカード指定を 1=有効  0=無効  未定義=1
//#define EXARGV_USE_WC         	1

//[] ワイルドカードon時に、ワイルドカード文字 ** があれば再帰検索に,
//      1=する 0=しない 未定義=1
//#define EXARGV_USE_WC_REC     	1

//[] @レスポンスファイルを,
//      1=有効   0=無効  未定義=0
//#define EXARGV_USE_RESFILE    	0

//[] 簡易コンフィグ(レスポンス)ファイル入力を,
//      1=有効  0=無効  未定義=0
//   有効時は、win/dosなら .exe を .ini に置換したパス名.
//             以外なら unix 系だろうで ~/.実行ファイル名.ini
//#define EXARGV_USE_CONFIG     	0

//[] コンフィグファイル入力有効のとき、これを定義すれば,
//      コンフィグファイルの拡張子をこれにする.
//#define EXARGV_CONFIG_EXT         ".ini"

//[] 定義すると、この名前の環境変数をコマンドライン文字列として利用.
//#define EXARGV_ENVNAME            "your_app_env_name"

//[] win環境のみ. argv[0] の実行ファイル名をフルパス化.
//      1=有効  0=無効      未定義=0
//   ※bcc,dmc,watcomは元からフルパスなので何もしません. のでvc,gcc向.
//#define EXARGV_USE_FULLPATH_ARGV0  0

//[] 定義すれば、filePath中の \ を / に置換.
//#define EXARGV_TOSLASH

//[] 定義すれば、filePath中の / を \ に置換.
//#define EXARGV_TOBACKSLASH

//[] / もオプション開始文字とみなす(1)  みなさない(0)
//#define EXARGV_USE_SLASH_OPT      0


// ---------------------------------------------------------------------------

// 2009 再帰指定を**にすることで、仕様を単純化.
// 2023 UTF-8 対処. vcpkgがWin用に必ず_WINDOWSを定義するためWinMain指定変更.
// 2024 UTF-8 の対応方法を変更. -- 対応. マクロ名等各種変更.
